#! /bin/bash

echo -e "\e[34mTesting '--monitor' and tlog functionality\e[00m"

v_INOTIFY="$( which inotifywait 2> /dev/null || true )"
if [[ -z "$v_INOTIFY" ]]; then
	echo -e "\e[33mCommand 'inotifywait' not present. Skipping tests.\e[00m"
	exit 0
fi

echo "Note: Instead of using the maldet executable, this test copies and makes modifications to it and other files. If this test fails, it might be a result of unexpected future changes to the following:"
echo "'$d_MALDET/maldet'"
echo "'$d_MALDET/internals/functions"

function fn_warn_maldet {
	echo
	echo -e "\e[33mWARNING: There is potentially an active maldet monitoring job ongoing. The above output will tell you whether or not this is the case. You will likely want to kill this with the following command:\e[00m"
	echo "$d_MALDET_TESTS_WORKING/maldet -k"
	echo
	exit 1
}

### Make a copy of the files we need to change
cp -a "$d_MALDET"/maldet "$d_MALDET_TESTS_WORKING"/maldet
cp -a "$d_MALDET"/internals/functions "$d_MALDET_TESTS_WORKING"/functions

### Modify maldet executable to point to the modified functions file
sed -i '/source $intfunc/i intfunc="'"$d_MALDET_TESTS_WORKING/functions\"" "$d_MALDET_TESTS_WORKING"/maldet
### Modify functions file to set specific variables during the monitoring cycle
sed -i '/^monitor_cycle[(][)] {/a d_TEST="'"$d_MALDET_TESTS_WORKING"'"; inotify_log="$d_TEST"/inotify_log; inotify_trim=1100' "$d_MALDET_TESTS_WORKING"/functions
### Modify functions file to set specific variables when monitoring is initiated
sed -i '/^monitor_init[(][)] {/a d_TEST="'"$d_MALDET_TESTS_WORKING"'"; inotify_log="$d_TEST"/inotify_log' "$d_MALDET_TESTS_WORKING"/functions
### Truncate the monitor check process - we don't need all of it
sed -i '/monitor_scanlist=/a monitor_scanlist="'"$d_MALDET_TESTS_WORKING"'"/scan_list' "$d_MALDET_TESTS_WORKING"/functions
sed -i '/$tlog $inotify_log/a '"}\n\nsomething_else() {" "$d_MALDET_TESTS_WORKING"/functions
### Modify functions file allow the monitoring cycle to be triggered on demand
sed -i '/sleep $inotify_sleep/i while [ ! -f "$d_TEST"/loop ]; do inotify_sleep=1' "$d_MALDET_TESTS_WORKING"/functions
sed -i '/sleep $inotify_sleep/a done; rm -f "$d_TEST"/loop' "$d_MALDET_TESTS_WORKING"/functions
### Modify functions file to set a new file for inotify paths
sed -i '/inotify_fpaths="$sessdir\/inotify.paths.$$"/a inotify_fpaths="$d_TEST"/inotify.paths.12345' "$d_MALDET_TESTS_WORKING"/functions

### Make the directory that inotify will be monitoring:
mkdir "$d_MALDET_TESTS_WORKING"/monitor_test

### Clear the tlog inotify file
rm -f "$d_MALDET"/tmp/inotify

echo
### Start the inotify job
v_MALDET_RUN=true
"$d_MALDET_TESTS_WORKING"/maldet -m "$d_MALDET_TESTS_WORKING"/monitor_test || v_MALDET_RUN=false
echo

### Did maldet error out?
if [[ $v_MALDET_RUN == false ]]; then
	echo "Maldet either failed to run, or exited with a non-zero exit code" > /dev/stderr
	fn_warn_maldet
fi

### Did the inotify job start?
if [[ ! -f "$d_MALDET_TESTS_WORKING"/inotify_log ]]; then
	echo "Either the inotify job failed to start, or the attempts to modify the functions file failed" > /dev/stderr
	fn_warn_maldet
fi

### Modify a few files:
v_COUNT=0
echo -n "$v_COUNT" > "$d_MALDET_TESTS_WORKING"/monitor_test/foo
echo -n "$v_COUNT" > "$d_MALDET_TESTS_WORKING"/monitor_test/foobar

### Make sure the modifications were seen
sleep 1
v_TEST="$( grep -c "$d_MALDET_TESTS_WORKING/monitor_test/foo" "$d_MALDET_TESTS_WORKING"/inotify_log )"
if [[ "$v_TEST" -eq 0 ]]; then
	echo "inotify job failed to recognize changes" > /dev/stderr
	fn_warn_maldet
fi

### Modify a lot of files
echo "This may take a while"
while [[ "$( wc -l "$d_MALDET_TESTS_WORKING"/inotify_log | cut -d " " -f1 )" -lt 1200 ]]; do
	echo -n "$v_COUNT" > "$d_MALDET_TESTS_WORKING"/monitor_test/bar
	v_COUNT=$(( $v_COUNT + 1 ))
done
echo -n "$v_COUNT" > "$d_MALDET_TESTS_WORKING"/monitor_test/foo
echo -n "$v_COUNT" > "$d_MALDET_TESTS_WORKING"/monitor_test/foobar

### count the lines, initiate a loop, then count the lines again
v_LINES="$( wc -l "$d_MALDET_TESTS_WORKING"/inotify_log | cut -d " " -f1 )"
touch "$d_MALDET_TESTS_WORKING"/loop
sleep 2
v_LINES2="$( wc -l "$d_MALDET_TESTS_WORKING"/inotify_log | cut -d " " -f1 )"

### Test if the file length decreased
if [[ "$v_LINES" -le "$v_LINES2" ]]; then
	echo "Failed to trim inotify log" > /dev/stderr
	fn_warn_maldet
fi

### Test that the most recent changes are present
v_TEST1="$( tail -n6 "$d_MALDET_TESTS_WORKING"/inotify_log | grep -c "monitor_test/foo[[:blank:]]" )"
v_TEST2="$( tail -n6 "$d_MALDET_TESTS_WORKING"/inotify_log | grep -c "monitor_test/foobar[[:blank:]]" )"
if [[ "$v_TEST1" -lt 1 || "$v_TEST2" -lt 1 ]]; then
	echo "Most recent changes are not present. Are we trimming from the end of the file?" > /dev/stderr
	fn_warn_maldet
fi

### Test that the tlog file has the correct number of characters listed
v_CHARS="$( wc -c "$d_MALDET_TESTS_WORKING"/inotify_log | cut -d " " -f1 )"
v_CHARS2="$( cat "$d_MALDET"/tmp/inotify 2> /dev/null || true )"
if [[ "$v_CHARS" != "$v_CHARS2" ]]; then
	echo "tlog file was not updated correctly" > /dev/stderr
	fn_warn_maldet
fi

### Test that it was successfully killed
v_INOTIFY_PID="$( pgrep -f inotify.paths.[0-9]+ )"
kill -9 "$v_INOTIFY_PID"


